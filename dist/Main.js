// Generated by psc version 0.6.2
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var liftA1 = function (__dict_Applicative_7) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _91 = compare(__dict_Ord_11)(a1)(a2);
                if (_91 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _92 = compare(__dict_Ord_12)(a1)(a2);
                if (_92 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _93 = compare(__dict_Ord_13)(a1)(a2);
                if (_93 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var ap = function (__dict_Monad_15) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_15)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        "$": $dollar, 
        "*": $times, 
        "+": $plus, 
        "-": $minus, 
        "/": $div, 
        "<": $less, 
        "<$>": $less$dollar$greater, 
        "<*>": $less$times$greater, 
        "<=": $less$eq, 
        ">": $greater, 
        ">>=": $greater$greater$eq, 
        Applicative: Applicative, 
        Apply: Apply, 
        Bind: Bind, 
        Category: Category, 
        EQ: EQ, 
        Eq: Eq, 
        Functor: Functor, 
        GT: GT, 
        LT: LT, 
        Monad: Monad, 
        Num: Num, 
        Ord: Ord, 
        Semigroupoid: Semigroupoid, 
        ap: ap, 
        categoryArr: categoryArr, 
        compare: compare, 
        eqNumber: eqNumber, 
        flip: flip, 
        id: id, 
        liftA1: liftA1, 
        numNumber: numNumber, 
        ordNumber: ordNumber, 
        pure: pure, 
        refEq: refEq, 
        refIneq: refIneq, 
        "return": $$return, 
        semigroupoidArr: semigroupoidArr
    };
})();
var PS = PS || {};
PS.Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var sqrt = Math.sqrt;;
    return {
        sqrt: sqrt
    };
})();
var PS = PS || {};
PS.Point = (function () {
    "use strict";
    var Math = PS.Math;
    var Prelude = PS.Prelude;
    var point = function (x) {
        return function (y) {
            return {
                x: x, 
                y: y
            };
        };
    };
    var dist = function (p1) {
        return function (p2) {
            return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
        };
    };
    return {
        dist: dist, 
        point: point
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
    function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
    function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
    return {
        runFn2: runFn2, 
        runFn3: runFn3, 
        runFn4: runFn4
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        applicativeEff: applicativeEff, 
        applyEff: applyEff, 
        bindE: bindE, 
        bindEff: bindEff, 
        functorEff: functorEff, 
        monadEff: monadEff, 
        returnE: returnE
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    return {
        trace: trace
    };
})();
var PS = PS || {};
PS.Signal = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    
  function constant(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };
    
  function liftP(constant, fun, sig) {
    var out = constant(fun(sig.get()));
    sig.subscribe(function(val) { out.set(fun(val)); });
    return out;
  };
    
  function foldpP(constant, fun, seed, sig) {
    var acc = seed;
    var out = constant(acc);
    sig.subscribe(function(val) {
      acc = fun(val)(acc);
      out.set(acc);
    });
    return out;
  };
    
  function runSignal(sig) {
    return function() {
      sig.subscribe(function(val) {
        val();
      });
      return {};
    };
  };
    var $tilde$greater = function (__dict_Functor_17) {
        return Prelude.flip(Prelude["<$>"](__dict_Functor_17));
    };
    var lift = Data_Function.runFn3(liftP)(constant);
    var functorSignal = new Prelude.Functor(lift);
    var foldp = Data_Function.runFn4(foldpP)(constant);
    return {
        constant: constant, 
        foldp: foldp, 
        functorSignal: functorSignal, 
        lift: lift, 
        runSignal: runSignal, 
        "~>": $tilde$greater
    };
})();
var PS = PS || {};
PS.Signal_Time = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Signal = PS.Signal;
    var Prelude = PS.Prelude;
    
  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (process && process.hrtime && function() {
        var t = process.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };
    return {
        now: now
    };
})();
var PS = PS || {};
PS.Signal_DOM = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Signal = PS.Signal;
    var Prelude = PS.Prelude;
    var Signal_Time = PS.Signal_Time;
    
  function animationFrameP(constant, now) {
    return function() {
      var requestAnimFrame, cancelAnimFrame;
      if (window.requestAnimationFrame) {
        requestAnimFrame = window.requestAnimationFrame;
        cancelAnimFrame = window.cancelAnimationFrame;
      } else if (window.mozRequestAnimationFrame) {
        requestAnimFrame = window.mozRequestAnimationFrame;
        cancelAnimFrame = window.mozCancelAnimationFrame;
      } else if (window.webkitRequestAnimationFrame) {
        requestAnimFrame = window.webkitRequestAnimationFrame;
        cancelAnimFrame = window.webkitCancelAnimationFrame;
      } else if (window.msRequestAnimationFrame) {
        requestAnimFrame = window.msRequestAnimationFrame;
        cancelAnimFrame = window.msCancelAnimationFrame;
      } else if (window.oRequestAnimationFrame) {
        requestAnimFrame = window.oRequestAnimationFrame;
        cancelAnimFrame = window.oCancelAnimationFrame;
      } else {
        requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
        cancelAnimFrame = window.clearTimeout;
      }
      var out = constant(now());
      requestAnimFrame(function tick(t) {
        out.set(t); requestAnimFrame(tick);
      });
      return out;
    };
  };
    var animationFrame = animationFrameP(Signal.constant, Signal_Time.now);
    return {
        animationFrame: animationFrame
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    var either = function (_51) {
        return function (_52) {
            return function (_53) {
                if (_53 instanceof Left) {
                    return _51(_53.value0);
                };
                if (_53 instanceof Right) {
                    return _52(_53.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return {
        Left: Left, 
        Right: Right, 
        either: either
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Nothing() {

    };
    Nothing.value = new Nothing();
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    return {
        Just: Just, 
        Nothing: Nothing
    };
})();
var PS = PS || {};
PS.Graphics_Canvas = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    function getCanvasElementByIdImpl(id, Just, Nothing) {
    return function() {
      var el = document.getElementById(id);
      if (el && el instanceof HTMLCanvasElement) {
        return Just(el);
      } else {
        return Nothing;
      }
    };
  };
    function getContext2D(c) {  return function() {    return c.getContext('2d');  };};
    var getCanvasElementById = function (elId) {
        return getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
    };
    return {
        getCanvasElementById: getCanvasElementById, 
        getContext2D: getContext2D
    };
})();
var PS = PS || {};
PS.Color = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    
    function rgbV(r, g, b) {
        return ((r & 0xff) << 24)
             | ((g & 0xff) << 16)
             | ((b & 0xff) <<  8)
             |  0xff;
    };
    var rgb = Data_Function.runFn3(rgbV);
    return {
        rgb: rgb
    };
})();
var PS = PS || {};
PS.FrameBuffer = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    
function createFrameBufferV(ctx2d, width, height) {
    return function() {
        var imageData = ctx2d.createImageData(width, height);

        function render() {
            ctx2d.putImageData(imageData, 0, 0);
        }

        return {
            data: imageData.data,
            width: width,
            height: height,
            render: render,
            sharedPixel: {x:0, y:0}
        };
    };
};
    
    function updateFrameBufferV(fb, ratio, fn) {
        return function() {
            var n;
            var x;
            var index;
            var pixels = fb.data.length / 4;
            var toCompute = pixels * ratio;

            while(toCompute--) {
                n = Math.floor(Math.random() * pixels);
                index = n * 4;

                fb.sharedPixel.x = n % fb.width;
                fb.sharedPixel.y = (n-fb.sharedPixel.x) / fb.width;
                
                x = fn(fb.sharedPixel);
                fb.data[index++] = (x >> 24) & 0xff;
                fb.data[index++] = (x >> 16) & 0xff;
                fb.data[index++] = (x >>  8) & 0xff;   
                fb.data[index++] =  x        & 0xff;
            }
        }    
    };
    
function renderFrameBuffer(fb) {
    return function() {
       fb.render();
    }
};
    var updateFrameBuffer = Data_Function.runFn3(updateFrameBufferV);
    var createFrameBuffer = Data_Function.runFn3(createFrameBufferV);
    return {
        createFrameBuffer: createFrameBuffer, 
        renderFrameBuffer: renderFrameBuffer, 
        updateFrameBuffer: updateFrameBuffer
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Point = PS.Point;
    var Color = PS.Color;
    var Data_Either = PS.Data_Either;
    var Prelude = PS.Prelude;
    var FrameBuffer = PS.FrameBuffer;
    var Signal_DOM = PS.Signal_DOM;
    var Graphics_Canvas = PS.Graphics_Canvas;
    var Signal = PS.Signal;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Maybe = PS.Data_Maybe;
    var width = 1000;
    var renderRatio = 0.35;
    var initialState = {
        dt: 0, 
        currentTime: 0, 
        ball: {
            position: Point.point(0)(100), 
            velocity: Point.point(0.15)(0.25), 
            radius: 10, 
            color: Color.rgb(123)(33)(80)
        }
    };
    var height = 500;
    var drawBall = function (b) {
        return function (p) {
            return Point.dist(b.position)(p) <= b.radius ? b.color : Color.rgb(123)(123)(123);
        };
    };
    var draw = function (frameBuffer) {
        return function (s) {
            return function __do() {
                FrameBuffer.updateFrameBuffer(frameBuffer)(renderRatio)(drawBall(s.ball))();
                return FrameBuffer.renderFrameBuffer(frameBuffer)();
            };
        };
    };
    var adjust = function (min) {
        return function (max) {
            return function (x) {
                var z = (x - min) / (max - min);
                var adjust$prime = function (_90) {
                    if (_90 < 0) {
                        return new Data_Either.Left(min);
                    };
                    if (_90 > 1) {
                        return new Data_Either.Left(max);
                    };
                    return new Data_Either.Right(x);
                };
                return adjust$prime(z);
            };
        };
    };
    var updateComponent = function (get) {
        return function (set) {
            return function (max) {
                return function (ball) {
                    return function (dt) {
                        var uncheckedNew = get(ball.position) + get(ball.velocity) * dt;
                        var checkedNew = adjust(0)(max)(uncheckedNew);
                        var direction = (function () {
                            if (checkedNew instanceof Data_Either.Left) {
                                return -1;
                            };
                            if (checkedNew instanceof Data_Either.Right) {
                                return 1;
                            };
                            throw new Error("Failed pattern match");
                        })();
                        var newV = direction * get(ball.velocity);
                        var $$new = Data_Either.either(Prelude.id(Prelude.categoryArr))(Prelude.id(Prelude.categoryArr))(checkedNew);
                        var _105 = {};
                        for (var _106 in ball) {
                            if (ball.hasOwnProperty(_106)) {
                                _105[_106] = ball[_106];
                            };
                        };
                        _105.position = set(ball.position)($$new);
                        _105.velocity = set(ball.velocity)(newV);
                        return _105;
                    };
                };
            };
        };
    };
    var updateX = updateComponent(function (p) {
        return p.x;
    })(function (p) {
        return function (n) {
            var _107 = {};
            for (var _108 in p) {
                if (p.hasOwnProperty(_108)) {
                    _107[_108] = p[_108];
                };
            };
            _107.x = n;
            return _107;
        };
    })(width);
    var updateY = updateComponent(function (p) {
        return p.y;
    })(function (p) {
        return function (n) {
            var _109 = {};
            for (var _110 in p) {
                if (p.hasOwnProperty(_110)) {
                    _109[_110] = p[_110];
                };
            };
            _109.y = n;
            return _109;
        };
    })(height);
    var updateBall = function (dt) {
        return function (ball) {
            var ball$prime = updateX(ball)(dt);
            return updateY(ball$prime)(dt);
        };
    };
    var updateState = function (time) {
        return function (state) {
            var dt = time - state.currentTime;
            var _111 = {};
            for (var _112 in state) {
                if (state.hasOwnProperty(_112)) {
                    _111[_112] = state[_112];
                };
            };
            _111.dt = dt;
            _111.currentTime = time;
            _111.ball = updateBall(state.dt)(state.ball);
            return _111;
        };
    };
    var mainFn = function (canvas) {
        return function __do() {
            var _13 = Signal_DOM.animationFrame();
            var _12 = Graphics_Canvas.getContext2D(canvas)();
            var _11 = FrameBuffer.createFrameBuffer(_12)(width)(height)();
            return Signal.runSignal(Signal["~>"](Signal.functorSignal)(Signal.foldp(updateState)(initialState)(_13))(function (state) {
                return draw(_11)(state);
            }))();
        };
    };
    var main = function __do() {
        var _14 = Graphics_Canvas.getCanvasElementById("canvas")();
        return (function () {
            if (_14 instanceof Data_Maybe.Just) {
                return mainFn(_14.value0);
            };
            if (_14 instanceof Data_Maybe.Nothing) {
                return Debug_Trace.trace("Can't find canvas.");
            };
            throw new Error("Failed pattern match");
        })()();
    };
    return {
        adjust: adjust, 
        draw: draw, 
        drawBall: drawBall, 
        height: height, 
        initialState: initialState, 
        main: main, 
        mainFn: mainFn, 
        renderRatio: renderRatio, 
        updateBall: updateBall, 
        updateComponent: updateComponent, 
        updateState: updateState, 
        updateX: updateX, 
        updateY: updateY, 
        width: width
    };
})();
PS.Main.main();
